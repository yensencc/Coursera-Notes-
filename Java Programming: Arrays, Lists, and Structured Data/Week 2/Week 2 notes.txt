High-Level Steps: First View

Make a list of words for each category

For each word in the story template
I checked if the word had <>
	if so, I piecked a word in the category
	added the picked word to my story
Otherwise
	I just added that word to my story


/// Arraylist

Counting Different Words


// Modifying Code for Unique Words using StorageResource

	Store all words read from a file
	Only unique/different words

FileResourece resourece = new FileResource(source);
for( String word :  resource.words()){
	myWords.add(word.toLowerCase());
}

FileResource resource = new FileResource(source);
for(String word : resource.words()){
	word = word.toLowerCase();
	if(! myWords.contains(word)){
		myWords.add(word);
	}
}



// Random Choice from StorageResource

	StorageResourece accessed as iterable

	  must use for loop to get at all elements
	  even if we top early, coding issuees
	Woudl be faster and simpler with String[]

public String getRanddomWord(String[] words){
	Random rand = new Ransom();
	int index = rand.nextInt(words.length);
	return words[index];
}


 // ArrayList as a Solution

Class ArrayList in package java.util
	expands as needed using .add method
	provides access via index to any element in list
	Essential in implementing StorageResource!
  Basic Syntx, we'll see usage in code

ArrayList<String> words = new ArrayList<String> ();
words.add("hello");
words.add("word");
String s = words.get(1);
words.set(0,"goodbye");



/////  Implementation of ArrayList for Unique Words

import edu.duke.*;
import java.util.ArrayList;


public class WordFrequencies
{
	private ArrayList<String> myWords;
	private ArrayList<Integer> myFreqs;
	
	public WordFrequencies(){
	  myWords = new ArrayList<String>();
	  myFreqs = new ArrayList<Integer>();
	}
	
	public void findUnique(){
	  FileResource resource = new FileResource();
	  for(String s : resource.words()){
		s = s.toLowerCase();
		int index = myWords.indexOf(s);
		if(index == -1){
		  myWords.add(s);
		  myFreqs.add(1);
		}
		else{
		  int value = myFreqs.get(index);
		  myFreqs.set(index,value + 1);
		}
	  }
	}

	public void tester(){
	   findUnique();
	   System.out.println("# unique words: " + myWords.size());
	   for(in k=0 ; k < myWords.size(); k++){
		System.out.println(myFreqs.get(k) + "\t" +myWords.get(k));
	   }
	}


}







//////// ArrayList Advantages and Issues



import java.util.*;
import edu.duke.*;

public class WordsWithArrays {
	StorageResource myWords;

	public WordWithArrays(){
	  myWords = new StorageResource();
	}
	
	public void readWords(){
	  myWords.clear();
	  FileResource resource = new FileResource();
	  for(String word : resource.words()){
		myWords.add(word.toLowerCase());
	  }
	}

	public boolean contains(String[] list, String 	word, int number){
	  for(int k=0; k < number h; k++){
	      if(list[k].equals(word)){
		 return true;
	       }
		
	  }
		return false;

	}


	public int numberOfUniqueWords(){
	  int numStored = 0;
	  String[] words = new String[myWords.size()];
	  for(String s : myWord.data()){
		if(! contains(words, s, numStored)){
			words[numStored] = s;
		        numStored++;
		}
	  }
		return numStored;
	}

	public void tester(){
		readWords();
		System.out.println("Number of words read: " + myWords.size());
		int unique = numberOfUniqueWords();
		System.out.println("Array count" + unique);
	}
}




























/////////////// Ruby on rails quiz ////////////////

// Ruby method (NOT RAILS)

the cycle method
[1,2,3,4,5].sample



/////////////////////////////

// Ruby on rails Method (NOT RUBY)
alias_attribute

blank method
// This simplifies
address.nil? || address.empty?
to address.blank?

The include? method

.at(position) method


instance_values method

M.reachable?

class_attribute

reverse_merge