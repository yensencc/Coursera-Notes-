Variable decorations

variable initialiation vs devoration

Mathematical expressions

int x = 2;
int y = x * 3 = 6
int z = y / 2; = 3
x = (2 + z) % 2; 5 % 2


function calls

Java has methods not functions

call site

Object = Data + Code

What is the difference between call and invoke ?

Explicit cast
implicity



public class Point {
	private int x;
	private int y;

	public Point(int startx, int starty){
		x = startx;
		y = starty;
	}
	
	public int getX() {return x;}
	public int getY() {return y;}
	public double distance (Point otherPt){
		int dx = x - otherPt.getX();
		int dy = y - otherPt.getY();
		return Math.sqrt(dx * dx + dy  * dy); 
	}
	public static void main(string[] args){
		Point p1 = new Point(3,4);
		Point p2 = new Point(6,8);
		System.out.println(p1.distance(p2));
	}
}


Primitive vs objects

Primitives: int, double, char, boolean, float, long, byte, short

public class Thing {
  
  private int a;
  
  public Thing(int x) {
    a = x;
  }
  
  public int geta() {
    return a ;
  }
  
  public void combine (Thing y) {
    a = a + y.geta();
  }
}




//////////////////// PerimeterRunner class completed from week 1 ///////////


import edu.duke.*;
import java.io.File;

public class PerimeterAssignmentRunner {
    public double getPerimeter (Shape s) {
        // Start with totalPerim = 0
        double totalPerim = 0.0;
        // Start wth prevPt = the last point 
        Point prevPt = s.getLastPoint();
        // For each point currPt in the shape,
        for (Point currPt : s.getPoints()) {
            // Find distance from prevPt point to currPt 
            double currDist = prevPt.distance(currPt);
            // Update totalPerim by currDist
            totalPerim = totalPerim + currDist;
            // Update prevPt to be currPt
            prevPt = currPt;
        }
        // totalPerim is the answer
        return totalPerim;
    }

    public int getNumPoints (Shape s) {
        // Put code here
        int numOfPoints = 0;
        for(Point point : s.getPoints()){
            numOfPoints += 1;
        }
        return numOfPoints;
    }

    public double getAverageLength(Shape s) {
        // Put code here
        double averageLength;
        int numOfPoints = 0;
        Point prevPt = s.getLastPoint();
        double totalLength = 0;
        for(Point currPt : s.getPoints()){
            totalLength += currPt.distance(prevPt);
            numOfPoints += 1;
            prevPt = currPt;
        }
        averageLength = totalLength / numOfPoints;
        return averageLength;
    }

    public double getLargestSide(Shape s) {
        // Put code here
        double currSide = 0;
        double prevSide = 0;
        Point prevPt = s.getLastPoint();
        double largestSide = 0;
        for(Point currPt : s.getPoints()){
          currSide = currPt.distance(prevPt);
          prevPt = currPt;
          if (currSide > prevSide)
            largestSide = currSide;
          else{
              largestSide = prevSide;
            }
        }
        return largestSide;
    }

    public double getLargestX(Shape s) { 
        // Put code here
        double largestX = 0;
        double currX = 0;
        double preX = 0;
        for(Point currPt : s.getPoints()){
            currX = currPt.getX();
            if (currX > preX){
                largestX = currX;
            }else{
                largestX = preX;
            }
            preX = currX;
        }
        return largestX;
    }

   public double getLargestPerimeterMultipleFiles() {
        DirectoryResource dr = new DirectoryResource();
        double largestPerimeter  = 0;
        double prePerimeter = 0;
        double currentPerimeter = 0;
        for (File f : dr.selectedFiles()) {
            FileResource fr = new FileResource(f);
	    Shape s = new Shape(fr);
	    currentPerimeter =  getPerimeter(s);
	    if(currentPerimeter > prePerimeter){
	        largestPerimeter = currentPerimeter;
	       }else{
	           largestPerimeter = prePerimeter;
	       }
	       
	    prePerimeter = currentPerimeter;
        }
        return largestPerimeter;
}

    public String getFileWithLargestPerimeter() {
        // Put code here
        DirectoryResource dr = new DirectoryResource();
        double largestPerimeter  = 0;
        double prePerimeter = 0;
        double currentPerimeter = 0;
        String preName = "";
        String fileName = "";
        String currentName = "";
        for (File f : dr.selectedFiles()) {
            FileResource fr = new FileResource(f);
	    Shape s = new Shape(fr);
	    currentPerimeter =  getPerimeter(s);
	    currentName = f.getName();
	    if(currentPerimeter > prePerimeter){
	         largestPerimeter = currentPerimeter;
	         fileName = currentName;
	       }else{
	           largestPerimeter = prePerimeter;
	           fileName = preName;
	       }
	       
	    prePerimeter = currentPerimeter;
	    preName = currentName;
        }
    
       return fileName;
    }

    public void testPerimeter () {
        FileResource fr = new FileResource();
        Shape s = new Shape(fr);
        System.out.println("perimeter = " + getPerimeter(s));
        System.out.println("Number of points = " + getNumPoints(s));
        System.out.println("Average length = " + getAverageLength(s) );
        System.out.println("Largest Side = " + getLargestSide(s));
        System.out.println("Largest X = " + getLargestX(s));
        testPerimeterMultipleFiles();
        testFileWithLargestPerimeter();
    }
    
    public void testPerimeterMultipleFiles() {
        System.out.println("Largest perimeter of all files = " + getLargestPerimeterMultipleFiles());
    }

    public void testFileWithLargestPerimeter() {
        System.out.println("The file name with the largest perimeter = " + getFileWithLargestPerimeter());
    }

    // This method creates a triangle that you can use to test your other methods
    public void triangle(){
        Shape triangle = new Shape();
        triangle.addPoint(new Point(0,0));
        triangle.addPoint(new Point(6,0));
        triangle.addPoint(new Point(3,6));
        for (Point p : triangle.getPoints()){
            System.out.println(p);
        }
        double peri = getPerimeter(triangle);
        System.out.println("perimeter = "+ peri );
      
    }

    // This method prints names of all files in a chosen folder that you can use to test your other methods
    public void printFileNames() {
        DirectoryResource dr = new DirectoryResource();
        for (File f : dr.selectedFiles()) {
            System.out.println(f);
        }
    }

    public static void main (String[] args) {
        PerimeterAssignmentRunner pr = new PerimeterAssignmentRunner();
        pr.testPerimeter();
    }
}